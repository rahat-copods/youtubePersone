import { z } from "zod";
import { parseWebVTTForEmbeddings } from "../youtube/parseCaption";
import { CaptionSegment } from "@/types";

const APIFY_ACTOR_ID = "h7sDV53CddomktSi5";
const apifyToken = process.env.APIFY_API_TOKEN!;

export async function startApifyRun(videoId: string): Promise<string> {
  const res = await fetch(
    `https://api.apify.com/v2/acts/${APIFY_ACTOR_ID}/runs?token=${apifyToken}`,
    {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        downloadSubtitles: true,
        preferAutoGeneratedSubtitles: true,
        saveSubsToKVS: true,
        startUrls: [
          { url: `https://youtube.com/watch?v=${videoId}`, method: "GET" },
        ],
        subtitlesFormat: "vtt",
        subtitlesLanguage: "en",
        maxResults: 1,
      }),
    }
  );

  if (!res.ok) {
    throw new Error("Failed to start Apify actor");
  }

  const runData = await res.json();
  return runData.data.id as string;
}

export async function fetchApifyResults(
  runId: string
): Promise<CaptionSegment[]> {
  const maxAttempts = 60;
  let attempts = 0;

  while (attempts < maxAttempts) {
    await new Promise((resolve) => setTimeout(resolve, 5000));

    const statusRes = await fetch(
      `https://api.apify.com/v2/acts/${APIFY_ACTOR_ID}/runs/${runId}?token=${apifyToken}`
    );
    const statusData = await statusRes.json();
    const status = statusData.data.status;
    const datasetId = statusData.data.defaultDatasetId;

    if (status === "SUCCEEDED") {
      const resultsRes = await fetch(
        `https://api.apify.com/v2/datasets/${datasetId}/items?token=${apifyToken}`
      );
      const results = await resultsRes.json();

      if (results.length > 0 && results[0].subtitles) {
        return parseWebVTTForEmbeddings(results[0].subtitles[0].vtt);
      }
      return [];
    } else if (status === "FAILED" || status === "ABORTED") {
      throw new Error(`Apify actor ${status.toLowerCase()}`);
    }

    attempts++;
  }

  throw new Error("Caption extraction timed out");
}
